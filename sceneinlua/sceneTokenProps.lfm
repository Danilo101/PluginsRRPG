<?xml version="1.0" encoding="UTF-8"?>
<popupForm name="frmTokenProps" width="300" height="300" drawContainer="true" resizable="true" placement="center"
		   cancelable="false">
 		   
	<import file="interfaceUtils.xml"/>
	<style>
		flowPart.optionPart {
			height: 30;
			minWidth: 50;
			maxWidth: 5000;
			margins: {left=2, right=2, top=2, bottom=2};
		}
		
		.itemTitle {
			align: left;
			width: 110;
			autoSize: false;
			horzTextAlign: trailing;	
			vertTextAlign: center;
			margins:{right=5};
		}
		
		.itemContent {
			align: client;
			margins:{right=5};
		}
		
		.groupTitle {
			align: left;						
			autoSize: true;
			wordWrap: false;
			horzTextAlign: leading;	
			vertTextAlign: center;
			margins:{left=10, right=5};		
			fontSize: 15;
			fontColor: #FFCC66;
		}
		
		label {
			wordWrap: false;
		}
		
	</style>	

	<template name="GroupHeader">
		<!-- nomeLabel = uniqueName("labGroupHeader"); 
		     
			 if name == nil then
				name = uniqueName("flpGroupHeader");
			end; -->	 
	
		<flowPart class="optionPart">
			<label name="$(nomeLabel)" class="groupTitle"/>
			<horzLine align="bottom" strokeColor="#FFCC6670" margins="{left=10}"/>			
		</flowPart>
		
		<script>
			self.$(nomeLabel).text = lang("$(text)");
		</script>
	</template>

	<script>
		local NAME_TEXT = '_name_text';
		local NAME_BACKGROUND = '_name_back';	
	
		require("system.lua");
		require("rrpgScene_Globals.lua");
		require("rrpgScene_Undo.dlua");
		
		local scene = nil;	
		local theToken = nil;
		local theSelection = nil;
		local theMesa = nil;
		local ignoreRecalcWH = false;
		local realCellWidth = 1;
		local realCellHeight = 1;
		local offsetCellsW = 1;
		local offsetCellsH = 1;	
		local podeVerBarrinhas = false;
		local podeVerCoisasDeFoW = false;
		
		if not System.isMobile() then
			self.height = 450;
			self.width = 310;
		end;
	</script>	
	
	<template name="EdicaoBarrinha">
		<flowPart name="flpBar$(indice)" class="optionPart">			
			<label name="labBar$(indice)" class="itemTitle" fontColor="white"/>
			<flowLayout class="itemContent">
				<edit name="edtBarValue$(indice)" width="35"/>
				<label text="/" horzTextAlign="center" autoSize="true" wordWrap="false" margins="{left=8, right=8}"/>
				<edit name="edtBarMax$(indice)" width="35"/>
				<colorComboBox name="cmbCorBar$(indice)" width="50" useAlpha="false" 
							   margins="{left=8, right=8}"/>
			</flowLayout>	
		</flowPart>
		
		<script>
			self.labBar$(indice).text = LANG('scene.tokenEdit.barraPrefix') .. " $(indice):";
		</script>
	</template>
	
	<tabControl align="client">
		<tab name="tabPrincipal">
			<scrollBox align="client">
				<flowLayout align="top" autoHeight="true" maxControlsPerLine="1" name="flaContent">			
					<GroupHeader text="scene.menu.tokenOptions"/>			
						
					<!-- Personagem -->
					<flowPart class="optionPart">	
						<label name="labPersonagem" class="itemTitle"/>
						<comboBox name="cmbPersonagem" class="itemContent"/>
					</flowPart>	
					
					<!-- Nome -->
					<flowPart class="optionPart">	
						<label name="labNome" class="itemTitle"/>
						<edit name="edtNome" class="itemContent"/>
					</flowPart>						
					
					<!-- Agarrar ao Grid -->
					<flowPart class="optionPart">	
						<label name="labSnapToGrid" class="itemTitle"/>
						<checkBox name="cbxSnapToGrid" class="itemContent"/>
					</flowPart>					
					
					<EdicaoBarrinha indice="1"/>
					<EdicaoBarrinha indice="2"/>
					<EdicaoBarrinha indice="3"/>	
				
				</flowLayout>
			</scrollBox>		
		</tab>
		
		<template name="ComponenteDeLuz">
			<!-- nomeLabel = uniqueName("labCompLuz");

				if nomeMetric == nil then
					nomeMetric = uniqueName("labMetric");
				end;
				
				if nomeEdit == nil then
					nomeEdit = uniqueName("edtMetric");
				end;				
			-->	 		
		
			<layout align="top" height="28" margins="{top=2}">
				<label name="$(nomeLabel)" align="left" width="100" horzTextAlign="trailing" margins="{right=4}"/>	
				
				<layout align="client">
					<edit name="$(nomeEdit)" align="client" type="float" min="0" max="9999" decimalPlaces="1"/>
					<label name="$(nomeMetric)" text="m" autoSize="true" align="right" margins="{left=4, right=2}"/>													
				</layout>
			</layout>
			
			<script>
				self.$(nomeLabel).text = lang('$(title)') .. ":";								
			</script>
		</template>		
		
		<template name="ComponenteDeAngulo">
			<!-- nomeLabel = uniqueName("labCompAngulo"); 
			
				if nomeEdit == nil then
					nomeEdit = uniqueName("edtAngulo");
				end;	
			-->	 			
		
			<layout align="top" height="28" margins="{top=2}">
				<label name="$(nomeLabel)" align="left" width="100" horzTextAlign="trailing" margins="{right=4}"/>	
				
				<layout align="client">
					<edit name="$(nomeEdit)" align="client" type="float" min="1" max="360" decimalPlaces="0"/>
					<label text="graus" autoSize="true" align="right" margins="{left=4, right=2}"/>													
				</layout>
			</layout>
			
			<script>
				self.$(nomeLabel).text = lang('$(title)') .. ":";
			</script>			
		</template>			
		
		<tab name="tabFOW">
			<scrollBox align="client">
				<flowLayout align="top" autoHeight="true" maxControlsPerLine="1" name="flaContentFOW">			
					<GroupHeader text="scene.fogOfWar.tokenVision"/>			
					
					<flowPart class="optionPart" height="150">	
						<label name="labCampoDeVisao" class="itemTitle"/>				
						<layout class="itemContent">
							<!-- Possui visao -->
							<layout align="top" height="28" margins="{top=2}">
								<label name="labHasVision" align="left" width="100" horzTextAlign="trailing" margins="{right=4}"/>
								<checkBox name="cbxHasVision" align="client" class="itemContent" margins="{top=2}"/>																											
							</layout>						
							
							<ComponenteDeLuz title="scene.fogOfWar.sobLuzIntensa" nomeMetric="labMetricVLI" nomeEdit="edtMetricVLI"/>
							<ComponenteDeLuz title="scene.fogOfWar.sobLuzFraca" nomeMetric="labMetricVLF" nomeEdit="edtMetricVLF"/>
							<ComponenteDeLuz title="scene.fogOfWar.sobEscuridao" nomeMetric="labMetricVLE" nomeEdit="edtMetricVLE"/>
							<ComponenteDeAngulo title="scene.fogOfWar.angulo" nomeEdit="edtAnguloVisao"/>
						</layout>			
					</flowPart>		
										
											
					<GroupHeader text="scene.fogOfWar.tokenLight"/>														

					<flowPart class="optionPart" height="90">	
						<label name="labLuz" class="itemTitle"/>				
						<layout class="itemContent">
							<ComponenteDeLuz title="scene.fogOfWar.luzIntensa" nomeMetric="labMetricLI" nomeEdit="edtMetricLI"/>
							<ComponenteDeLuz title="scene.fogOfWar.luzFraca" nomeMetric="labMetricLF" nomeEdit="edtMetricLF"/>
							<ComponenteDeAngulo title="scene.fogOfWar.angulo" nomeEdit="edtAnguloLuz"/>
						</layout>			
					</flowPart>					
				</flowLayout>
			</scrollBox>			
		</tab>
	</tabControl>
	
	
	
	<BottomActionCancelPopupPanel actionClick="self:processarOK()" cancelClick="self:processarCancel()"/>
	
	<script><![CDATA[	
		self.title = lang('scene.menu.tokenOptions');	
		self.labPersonagem.text = lang('scene.tokenEdit.personagem');
		self.cbxSnapToGrid.text = lang('scene.tokenEdit.snapToGrid');
		self.labNome.text = lang('scene.tokenEdit.nome') .. ":";
		self.tabPrincipal.text = lang('scene.tokenEdit.propriedades');
		self.tabFOW.text = lang('scene.fogOfWar');
		self.labCampoDeVisao.text = lang('scene.fogOfWar.alcance.tokenVision');
		self.labLuz.text = lang('scene.fogOfWar.alcance.tokenLight');
		self.labHasVision.text = lang('scene.fogOfWar.token.hasSight');
		
		function recursiveEnumPersonagensEmBibItem(bibItem, dest)
			if bibItem.tipo == "personagem" then
				if (bibItem.loginDono ~= nil) and (bibItem.loginDono ~= "") then
					dest[#dest + 1] = bibItem;
				end;
			else
				local filhos = bibItem.filhos;
				
				for i = 1, #filhos, 1 do
					recursiveEnumPersonagensEmBibItem(filhos[i], dest);
				end;
			end;
		end;
		
		function self:listarPersonagens(mesa)
			local personagens = {};
			recursiveEnumPersonagensEmBibItem(mesa.biblioteca, personagens);
			
			table.sort(personagens,
				function(left, right)
					return utils.compareStringPtBr(left.nome, right.nome) < 0;
				end);
				
			local nomes = {};
			local valores = {};
			
			nomes[1] = LANG("scene.tokenEdit.semPersonagem");
			valores[1] = "0";
			
			for i = 1, #personagens, 1 do
				nomes[#nomes + 1] = personagens[i].nome;
				valores[#valores + 1] = tostring(personagens[i].codigoInterno);
			end;
			
			self.cmbPersonagem.items = nomes;
			self.cmbPersonagem.values = valores;
		end;
		
		function self:prepareForShow(oSelection, oScene)
			scene = oScene;
			theSelection = oSelection;
			
			if #theSelection > 0 then
				theToken = theSelection[1];
			else
				theToken = nil;
			end;					
			
			podeVerBarrinhas = false;
			
			if theToken ~= nil then		
				podeVerBarrinhas = oScene.isGM or theToken.isMine;
				podeVerCoisasDeFoW = podeVerBarrinhas and oScene.fogOfWar.enabled;
			
				theMesa = rrpg.getMesaDe(oScene);
				self:beginUpdate();
			
				if theMesa ~= nil then
					self:listarPersonagens(theMesa);
					self.cmbPersonagem.value = tostring(theToken.ownerCharacter) or "0";
				else
					self.cmbPersonagem.items = {};
				end;
			
				self.cbxSnapToGrid.checked = theToken.snapToGrid;
				self.edtNome.text = theToken.name;					
								
				for i = 1, 3, 1 do
					self["flpBar" .. i].visible = podeVerBarrinhas;
					
					if podeVerBarrinhas then
						self["edtBarValue" .. i].text = theToken["barValue" .. i];
						self["edtBarMax" .. i].text = theToken["barMax" .. i];						
						self["cmbCorBar" .. i].color = theToken["barColor" .. i];
					end;
				end;			
				
				self.tabFOW.visible = podeVerCoisasDeFoW;
				local metricToShow = lang("metric." .. oScene.worldMetricName);				
				self.labMetricVLI.text = metricToShow;
				self.labMetricVLF.text = metricToShow;
				self.labMetricVLE.text = metricToShow;
				self.labMetricLI.text = metricToShow;
				self.labMetricLF.text = metricToShow;
	
				
				self.edtMetricVLI.asNumber = theToken.visionIntenseLightRange;
				self.edtMetricVLF.asNumber = theToken.visionWeakLightRange;
				self.edtMetricVLE.asNumber = theToken.visionDarknessRange;				
				self.edtMetricLI.asNumber = theToken.lightIntenseRange;
				self.edtMetricLF.asNumber = theToken.lightWeakRange;
				self.edtAnguloVisao.asNumber = theToken.visionAngle;
				self.edtAnguloLuz.asNumber = theToken.lightAngle;
				self.cbxHasVision.checked = theToken.visionHaveVision;
				
				
				self:endUpdate();
			end;
		end;		
		
		function self:processarOK()
			if theToken == nil then
				return;
			end;
		
			theToken:beginUpdate();
			
			tryFinally(
				function()
					SC3UNDO_Capture(theToken.scene, 
						function()
							local ownerCharID = tonumber(self.cmbPersonagem.value) or 0;
							
							if ownerCharID > 0 then
								theToken.ownerCharacter = ownerCharID;
							else
								theToken.ownerCharacter = 0;
							end;
							
							theToken.snapToGrid = self.cbxSnapToGrid.checked;
							theToken.name = self.edtNome.text;
							
							if podeVerBarrinhas then
								for i = 1, 3, 1 do
									theToken["barValue" .. i] = self["edtBarValue" .. i].text;
									theToken["barMax" .. i] = self["edtBarMax" .. i].text;						
									theToken["barColor" .. i] = self["cmbCorBar" .. i].color;
								end;										
							end;
							
							if podeVerCoisasDeFoW then
								theToken.visionIntenseLightRange = self.edtMetricVLI.asNumber;
								theToken.visionWeakLightRange = self.edtMetricVLF.asNumber;
								theToken.visionDarknessRange = self.edtMetricVLE.asNumber;				
								theToken.lightIntenseRange = self.edtMetricLI.asNumber;
								theToken.lightWeakRange = self.edtMetricLF.asNumber;
								theToken.visionAngle = self.edtAnguloVisao.asNumber;
								theToken.lightAngle = self.edtAnguloLuz.asNumber;
								theToken.visionHaveVision = self.cbxHasVision.checked;
							end;
						end);
				end,
				
				function()
					theToken:endUpdate();	
				end);			
					
			self:close();
		end;
		
		function self:processarCancel()
			self:close();
		end;
		]]>
	</script>
	
	<event name="onKeyUp">	
		if (event.keyCode == 0x89) or (event.keyCode == 0x1B) then
			setTimeout(
				function()
					self:processarCancel();
				end, 1);
			
			event.keyCode = 0;
			event.key = "";
		end;
	</event>	
	
	<event name="onCancelRequest">
		self:processarCancel();
	</event>
	
</popupForm>