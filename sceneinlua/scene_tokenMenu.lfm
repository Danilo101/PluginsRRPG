<?xml version="1.0" encoding="UTF-8"?>
<popupForm name="frmTokenMenu" width="235" height="120" title="Menu do Token" drawContainer="false"> 
	<import file="sceneTags.xml"/>

	<script>
		require("rrpgScene_Undo.dlua");
		require("scene_genericItemMenu.dlua");
		local currentMenuLayout = nil;
		local theSelection = nil;
		local theScene = nil;
		
		local function resizeForLayoutSize(aLayout)
			local h = aLayout.height;
			self.height = h + 5;
		end;
		
		local function onLayoutResized(aLayout)
			if aLayout == currentMenuLayout then
				resizeForLayoutSize(aLayout);
			end;
		end;
		
		local function alterarCamada(camada)
			if theSelection ~= nil then
				SC3UNDO_Capture(theScene,
					function()
						for k, v in pairs(theSelection) do
							v.layer = camada;
							v.selected = false;
						end;
					end);	
			end;
			
			self:close();
		end;
	</script>
	
	<flowLayout name="flaLayout" class="menu">
	</flowLayout>	
	
	<flowLayout name="flaCamadas" class="menu">
	</flowLayout>
	
	<flowLayout name="flaImageOptions" class="menu">
	</flowLayout>	
	
	<script>
		local __Menuses = {self.flaLayout, self.flaCamadas, self.flaImageOptions};
		require("rrpgScene_Clipboard.dlua");
		require("rrpgScene_Undo.dlua");
	
		for k, v in pairs(__Menuses) do
			local aLayout = v;
			aLayout.onAfterLayoutCalc = function() onLayoutResized(aLayout); end;				
		end;
			
		-- Menu Principal	
	
		local btnLayer = newMenuItem(lang("scene.tokenMenu.changeLayer"), self.flaLayout);
		local btnImageOptions = newMenuItem(lang("scene.menu.token.imgOptions"), self.flaLayout);						
		local macEdit = newMultiActionMenuItem("", self.flaLayout, 5);
		local actCopy = macEdit:addActionButton("/icos/menuCopy.png", LANG("scene.menu.token.editCA.copy"));
		local actPaste = macEdit:addActionButton("/icos/menuPaste.png", LANG("scene.menu.token.editCA.paste"));
		local actUndo = macEdit:addActionButton("/icos/menuUndo.png", LANG("scene.menu.token.editCA.undo"));		
		local actInvisible = macEdit:addCheckBoxAction("/icos/menuInvisible.png", LANG("scene.visibilityChange.ToGMOnly"));				
		local actClearMovHist = macEdit:addActionButton("/icos/clearHistory.png", lang("scene.tokenMenu.clearHistMov"));				
		local actClearMemory = macEdit:addActionButton("/icos/clearMemory.png", lang("scene.tokenMenu.clearHistMov"));				
							
		local macOrganizar = newMultiActionMenuItem("", self.flaLayout, 5);
		local actBringToFront = macOrganizar:addActionButton("/icos/bringToFront.png", LANG("scene.organization.bringToFront"));		
		local actSendToBack = macOrganizar:addActionButton("/icos/sendToBack.png", LANG("scene.organization.sendToBack"));
		
		actBringToFront.onClick = function()
									GENERICItem_BringToFront(theScene, theSelection);
									self:close();
								  end;
								  
		actSendToBack.onClick = function()
									GENERICItem_SendToBack(theScene, theSelection);
									self:close();
								  end;				
		
		local btnApagar = newMenuItem(lang("scene.remove.item"), self.flaLayout);				
		local btnProps = newMenuItem(lang("scene.tokenMenu.properties"), self.flaLayout);				
		
		
		-- Menu Camadas
				
		local btnCamadaVoltar = newMenuItem(lang("scene.menu.backOption"), self.flaCamadas);
		local btnCamadaTokens, itmCamadaTokens = newMenuItem(lang("scene.layer.tokens.noprefix"), self.flaCamadas);
		local btnCamadaObjetos, itmCamadaObjetos = newMenuItem(lang("scene.layer.objects.noprefix"), self.flaCamadas);
		local btnCamadaBackground, itmCamadaBackground = newMenuItem(lang("scene.layer.background.noprefix"), self.flaCamadas);
		
		-- Menu de Opções de Imagem
		local btnImgOVoltar = newMenuItem(lang("scene.menu.backOption"), self.flaImageOptions);
		
		local macFlip = newMultiActionMenuItem(lang("scene.menu.token.imgFlipMA"), self.flaImageOptions, 4);
		local actImgOFlipH = macFlip:addCheckBoxAction("/icos/flipH.png", lang("scene.menu.token.imgFlipH"));
		local actImgOFlipV = macFlip:addCheckBoxAction("/icos/flipV.png", lang("scene.menu.token.imgFlipV"));		
		
		local macImgColors = newMultiActionMenuItem(lang("scene.menu.token.imgCoresMA"), self.flaImageOptions, 4);
		local actImgGrayscale = macImgColors:addCheckBoxAction("/icos/grayscale.png", lang("scene.menu.token.grayscale"));
		local actColorBlend = macImgColors:addCheckBoxAction("/icos/colorBlend.png", lang("scene.menu.token.colorBlend"));										
		
		local macFiltros = newMultiActionMenuItem(lang("scene.menu.token.imgFiltroMA"), self.flaImageOptions, 4);
		local actFiltroNone = macFiltros:addRadioButtonAction("/icos/none.png", lang("scene.menu.token.imgFiltroMA.none"));
		local actFiltroGlow = macFiltros:addRadioButtonAction("/icos/glow.png", lang("scene.menu.token.imgFiltroMA.glow"));												
		local actFiltroInnerGlow = macFiltros:addRadioButtonAction("/icos/innerGlow.png", lang("scene.menu.token.imgFiltroMA.innerGlow"));
		local actFiltroBlur = macFiltros:addRadioButtonAction("/icos/blur.png", lang("scene.menu.token.imgFiltroMA.blur"));		
		
		local macImgFrame = newMultiActionMenuItem(lang("scene.menu.token.imgFrameMA"), self.flaImageOptions, 4);
		local actFrameNone = macImgFrame:addRadioButtonAction("/icos/none.png", lang("scene.menu.token.imgFrameMA.none"));
		local actFrameBoton = macImgFrame:addRadioButtonAction("/icos/botonFrame.png", lang("scene.menu.token.imgFrameMA.boton"));														
		
		btnLayer.onClick = function()
							  self:setActiveMenu(self.flaCamadas);
						   end;	
		
		btnCamadaVoltar.onClick = function()
							self:setActiveMenu(self.flaLayout);
						  end;	
						  
		btnImgOVoltar.onClick = btnCamadaVoltar.onClick;
		
		btnImageOptions.onClick = function()
									self:setActiveMenu(self.flaImageOptions);
							      end;	
								  
		actCopy.onClick = function()
							SC3CLIPBOARD_Copy(theSelection);
							self:close();
						  end;	
						  
		actPaste.onClick = function()
							SC3CLIPBOARD_Paste(theScene);
							self:close();
						  end;		
							
		actUndo.onClick = function()
							SC3UNDO_Undo(theScene);
							self:close();
						  end;	

		actClearMovHist.onClick = function()
									SC3UNDO_Capture(theScene,
										function()
											for i = 1, #theSelection, 1 do
												local token = theSelection[i];
												local uData = token.userData;
												
												if uData ~= nil then
													local movHist = uData.movHist;
													
													if type(movHist) == "table" then
														ndb.clearNode(movHist);
													end;
												end;
											end;
										end);
									
									self:close();
								  end;
								  
		actClearMemory.onClick = function()
									SC3UNDO_Capture(theScene,
										function()
											for i = 1, #theSelection, 1 do
												local token = theSelection[i];
												token:clearMemoryAreas();
											end;
										end);
									
									self:close();
								  end;
								 										  
								 		
		
			local function createCallbackChangeImagePropValue(prop, value)
				local xScene = theScene;
				
				return function()
						local frmSelCor = gui.newForm("frmSelColor");
						local selecionados = theSelection;
						
						SC3UNDO_Capture(xScene, 
							function()
								for i = 1, #selecionados, 1 do
									local image = selecionados[i].image;

									if image ~= nil then				
										image[prop] = value;										
									end;
								end;	
							end);

						self:close();
					end;	
			end;
		
		actFiltroNone.onClick = function()
									local frmSelCor = gui.newForm("frmSelColor");
									local selecionados = theSelection;
									
									SC3UNDO_Capture(theScene,
										function()
											for i = 1, #selecionados, 1 do
												local image = selecionados[i].image;

												if image ~= nil then				
													selecionados[i].image.filterEx = "none";										
												end;
											end;	
										end);
			
									self:close();
								end;	

		actFiltroBlur.onClick = function()
									local frmSelCor = gui.newForm("frmSelColor");
									local selecionados = theSelection;
									
									SC3UNDO_Capture(theScene, 
										function()
											for i = 1, #selecionados, 1 do
												local image = selecionados[i].image;

												if image ~= nil then				
													selecionados[i].image.filterEx = "blur";										
												end;
											end;
										end);
			
									self:close();
								end;	
							
				local function createCallbackForSetFiltroComCor(filterExValue, titulo, defineTitulo)
					local xScene = theScene;
				
					return function()
								local frmSelCor = gui.newForm("frmSelColor");
								local selecionados = theSelection;
								
								frmSelCor.onRetorno = 
									function(cor, definido)
										SC3UNDO_Capture(xScene, 
											function()
												for i = 1, #selecionados, 1 do
													local image = selecionados[i].image;

													if image ~= nil then
														if definido then
															image.filterEx = filterExValue;
															image.filterExColor = cor;												
														end;
													end;
												end;	
											end);
									end;
									
								frmSelCor:prepareForShow(selecionados[1].image.filterExColor, 
														{useAlpha=false, 
														 title=titulo,
														 defineTitle=defineTitulo});									
								self:close();
								frmSelCor:show();
							end;
				end;						
		
		btnCamadaTokens.onClick = function() alterarCamada("tokens"); end;
		btnCamadaObjetos.onClick = function() alterarCamada("objects"); end;
		btnCamadaBackground.onClick = function() alterarCamada("background"); end;
		
		btnApagar.onClick = function()
								local sel = theSelection;								
								local msg;
								
								if #sel == 1 then
									msg = LANG("scene.ask.deleteOneItem");
								else
									msg = string.format(LANG("scene.ask.deleteMultiItem"), #sel);						
								end;
								
								self:close();
								
								dialogs.confirmYesNo(msg, 
									function(confirmado)
										if confirmado then
											SC3UNDO_Capture(theScene, 
												function()
													for i = 1, #sel, 1 do
														sel[i]:delete();
													end;
												end);
										end;
									end);			
							end;
							
		btnProps.onClick = function ()
							-- Chamar outro popup aqui
							 local frm = gui.newForm("frmTokenProps");
							 frm:prepareForShow(theSelection, theScene);									  
							 self:close();
							 frm:show();
						   end;
		
		
		function self:setActiveMenu(menu)
			currentMenuLayout = menu;
		
			for k, v in pairs(__Menuses) do
				if menu == v then
					v.visible = true;
				else
					v.visible = false;
				end;
			end;
			
			resizeForLayoutSize(menu)
		end;
		
		function self:prepareForShow(selection, scene)
			local firstItem = nil;
			local currentLayer = "tokens";
			theScene = scene;
			
			for k, v in pairs(selection) do
				firstItem = v;
				break;
			end;
			
			if firstItem ~= nil then
				currentLayer = firstItem.layer;
			end;
		
			itmCamadaTokens:setChecked(false);			
			itmCamadaObjetos:setChecked(false);
			itmCamadaBackground:setChecked(false);
					
			if currentLayer == "tokens" then
				itmCamadaTokens:setChecked(true);
			elseif currentLayer == "objects" then
				itmCamadaObjetos:setChecked(true);
			elseif currentLayer == "background" then
				itmCamadaBackground:setChecked(true);
			end;
		
			self:setActiveMenu(self.flaLayout);		
			theSelection = selection;
			
			local estaVisible = true;
			
			if #theSelection > 0 then
				local umToken = theSelection[1];
				
						local function createInvertBoolOptionCallback(propName)							
							local valorInicial = umToken[propName];
							local xScene = scene;
						
							return function()
										SC3UNDO_Capture(xScene,
											function()
												for i = 1, #theSelection, 1 do 
													theSelection[i][propName] = not valorInicial;
												end;	
											end);
										
										self:close();							
							       end;
						end;		

						local function createInvertImageBoolOptionCallback(propName)							
							local valorInicial = umToken.image[propName];
							local xScene = scene;
						
							return function()
										SC3UNDO_Capture(xScene, 
											function()										
												for i = 1, #theSelection, 1 do 
													theSelection[i].image[propName] = not valorInicial;
												end;
											end);
										
										self:close();							
							       end;
						end;	
				
				actColorBlend.onClick = function()
									local frmSelCor = gui.newForm("frmSelColor");
									local selecionados = theSelection;
									local xScene = scene;
									
									frmSelCor.onRetorno = 
										function(cor, definido)
											SC3UNDO_Capture(xScene,
												function()												
													for i = 1, #selecionados, 1 do
														local image = selecionados[i].image;

														if image ~= nil then
															if definido then
																selecionados[i].image.colorBlend = cor;
															else
																selecionados[i].image.colorBlend = "#00000000"; 
															end;
														end;
													end;
												end);	
										end;
										
									frmSelCor:prepareForShow(selecionados[1].image.colorBlend, 
															{useAlpha=false, 
															 title=lang("scene.menu.token.selCorTin"),
															 defineTitle=lang("scene.menu.token.selCorTin.defineTitle")});									
									self:close();
									frmSelCor:show();
								end;				
				
				actFiltroGlow.onClick = createCallbackForSetFiltroComCor("glow", lang("scene.menu.token.selCorGlow"), lang("scene.menu.token.selCorGlow.defineTitle"));						
				actFiltroInnerGlow.onClick = createCallbackForSetFiltroComCor("innerGlow", lang("scene.menu.token.selCorInnerGlow"), lang("scene.menu.token.selCorInnerGlow.defineTitle"));
				
				actFrameNone.onClick = createCallbackChangeImagePropValue("frame", "none");
				actFrameBoton.onClick = createCallbackChangeImagePropValue("frame", "boton");				
				
				-- Visibilidade
				estaVisible = umToken.visible;
				actInvisible:setChecked(not estaVisible);				
				actInvisible.onClick = createInvertBoolOptionCallback("visible");

				-- Image Options
				local __coresBlendNulas = {};
				__coresBlendNulas["#00000000"] = true;
				__coresBlendNulas["Null"] = true;
				__coresBlendNulas["None"] = true;
				__coresBlendNulas["Transparent"] = true;
				
				actImgOFlipH:setChecked(umToken.image.flipHorz);
				actImgOFlipV:setChecked(umToken.image.flipVert);
				actImgGrayscale:setChecked(umToken.image.grayscale);
				actColorBlend:setChecked(__coresBlendNulas[umToken.image.colorBlend] == nil);
				
				actImgOFlipH.onClick = createInvertImageBoolOptionCallback("flipHorz");
				actImgOFlipV.onClick = createInvertImageBoolOptionCallback("flipVert");
				actImgGrayscale.onClick = createInvertImageBoolOptionCallback("grayscale");
				
				local oFiltroEx = umToken.image.filterEx;
				actFiltroNone:setChecked(oFiltroEx == "none");
				actFiltroGlow:setChecked(oFiltroEx == "glow");
				actFiltroInnerGlow:setChecked(oFiltroEx == "innerGlow");
				actFiltroBlur:setChecked(oFiltroEx == "blur");
				
				local oFrame = umToken.image.frame;
				actFrameNone:setChecked(oFrame == "none");
				actFrameBoton:setChecked(oFrame == "boton");
			end;
			
		
		end;	
	</script>	
	
	<event name="onKeyUp">	
		if (event.keyCode == 0x89) or (event.keyCode == 0x1B) then
			setTimeout(
				function()
					self:close();
				end, 1);
			
			event.keyCode = 0;
			event.key = "";
		end;
	</event>
	
	<event name="onHide">
		theSelection = nil;
	</event>
	
</popupForm>