<?xml version="1.0" encoding="UTF-8"?>
<popupForm name="frmInseriorFireDrive" width="460" height="300" drawContainer="true" resizable="true" placement="center"
		   cancelable="false">
 		   
	<import file="interfaceUtils.xml"/>
	<style>
		flowPart.optionPart {
			height: 30;
			minWidth: 50;
			maxWidth: 5000;
			margins: {left=2, right=2, top=2, bottom=2};
		}
		
		.itemTitle {
			align: left;
			width: 110;
			autoSize: false;
			horzTextAlign: trailing;	
			vertTextAlign: center;
			margins:{right=5};
		}
		
		.itemContent {
			align: client;
			margins:{right=5};
		}
		
		.groupTitle {
			align: left;						
			autoSize: true;
			wordWrap: false;
			horzTextAlign: leading;	
			vertTextAlign: center;
			margins:{left=10, right=5};		
			fontSize: 15;
			fontColor: #FFCC66;
		}
	</style>

	<template name="GroupHeader">
		<!-- nomeLabel = uniqueName("labGroupHeader"); 
		     
			 if name == nil then
				name = uniqueName("flpGroupHeader");
			end; -->	 
	
		<flowPart class="optionPart">
			<label name="$(nomeLabel)" class="groupTitle"/>
			<horzLine align="bottom" strokeColor="#FFCC6670" margins="{left=10}"/>			
		</flowPart>
		
		<script>
			self.$(nomeLabel).text = lang("$(text)");
		</script>
	</template>

	<template name="EdicaoBarrinha">
		<flowPart name="flpBar$(indice)" class="optionPart">			
			<label name="labBar$(indice)" class="itemTitle" fontColor="white"/>
			<flowLayout class="itemContent">
				<edit name="edtBarValue$(indice)" width="35"/>
				<label text="/" horzTextAlign="center" autoSize="true" wordWrap="false" margins="{left=8, right=8}"/>
				<edit name="edtBarMax$(indice)" width="35"/>
				<colorComboBox name="cmbCorBar$(indice)" width="50" useAlpha="false" 
							   margins="{left=8, right=8}"/>
			</flowLayout>	
		</flowPart>
		
		<script>
			self.labBar$(indice).text = LANG('scene.tokenEdit.barraPrefix') .. " $(indice):";
		</script>
	</template>
			
	<script>
		require("system.lua");
		require("rrpgScene_Undo.dlua");
		require("dialogs.lua");
		require("firedrive.lua");
		local scene = nil;	
		local ignoreRecalcWH = false;
		local realCellWidth = 1;
		local realCellHeight = 1;
		local offsetCellsW = 1;
		local offsetCellsH = 1;
		local exibindoFOW = false;
		
		if not System.isMobile() then
			self.height = 450;
		end;
	</script>
	
	<scrollBox align="client">
		<rectangle left="5" top="0" width="130" height="400" color="gray"/>
		<recordList left="5" top="0" width="150" height="400" name="rclListaDosTokens" field="tokensSalvos" templateForm="rclPlayer_svg" selectable="true">
			<event name="onSelect">
				local selected = self.rclListaDosTokens.selectedNode;  
				if selected == nil then
					return;
				end;
	            local token = node.tokens[selected.name];
				if token ~= nil then
					self.widthVal.text = token.width;
					self.heightVal.text = token.height;
					self.angleVal.text = token.angle;
					self.positionX.text = token.x;
					self.positionY.text = token.y;
					self.edtBarValue1.text = token.bar1X;
					self.edtBarMax1.text = token.bar1Y;
					self.cmbCorBar1.color = token.bar1C or "Indianred";
					self.edtBarValue2.text = token.bar2X;
					self.edtBarMax2.text = token.bar2Y;
					self.cmbCorBar2.color = token.bar2C or "Lightskyblue";
					self.edtBarValue3.text = token.bar3X;
					self.edtBarMax3.text = token.bar3Y;
					self.cmbCorBar3.color = token.bar3C or "Limegreen";
					self.cbxSnapToGrid.checked = token.snapToGrid;
					self.cmbPersonagem.value = token.character;

					self.visionIntense.text = token.visionIntense;
					self.visionWeak.text = token.visionWeak;
					self.visionDark.text = token.visionDark;
					self.visionAngle.text = token.visionAngle;
					self.visionHave.checked = token.visionHave;
					self.lightIntense.text = token.lightIntense;
					self.lightWeak.text = token.lightWeak;
					self.lightAngle.text = token.lightAngle;

					self.image.url = token.url;
					self.labelVal.text = token.name;
					oldName = token.name;
					self.layerVal.value = lang("scene.inseridor.labels.layer" .. (token.layer or 3));
				end;
			</event>
			<event name="onCompare">               
					return utils.compareStringPtBr(nodeA.name, nodeB.name);
        	</event>
		</recordList>
		
		<tabControl left="155" top="0" width="300" height="405">
			<tab name="tabPrincipal">
				<scrollBox align="client">
					<flowLayout align="top" autoHeight="true" maxControlsPerLine="1" name="flaContent">		
						<GroupHeader text="scene.menu.tokenOptions"/>			
							
						<!-- Personagem -->
						<flowPart class="optionPart">	
							<label name="labPersonagem" class="itemTitle"/>
							<comboBox name="cmbPersonagem" class="itemContent"/>
						</flowPart>	
						
						<!-- Nome -->
						<flowPart class="optionPart">	
							<label name="labelText" class="itemTitle"/>
							<edit name="labelVal" class="itemContent"/>
						</flowPart>						
						
						<!-- Agarrar ao Grid -->
						<flowPart class="optionPart">	
							<label name="labSnapToGrid" class="itemTitle"/>
							<checkBox name="cbxSnapToGrid" class="itemContent"/>
						</flowPart>					
						
						<EdicaoBarrinha indice="1"/>
						<EdicaoBarrinha indice="2"/>
						<EdicaoBarrinha indice="3"/>

						<flowPart class="optionPart">
							<label name="layerText" class="itemTitle"/>
							<comboBox name="layerVal" class="itemContent"/>	
						</flowPart>	

						<flowPart class="optionPart">
							<label left="55" top="5" width="60" height="20" name="widthText" horzTextAlign="center"/>
							<edit left="115" top="5" width="50" height="25" name="widthVal" type="number"/>
							<label left="170" top="5" width="60" height="20" name="widthCell"/>
						</flowPart>	

						<flowPart class="optionPart">
							<label left="55" top="5" width="60" height="20" name="heightText" horzTextAlign="center"/>
							<edit left="115" top="5" width="50" height="25" name="heightVal" type="number"/>
							<label left="170" top="5" width="60" height="20" name="heightCell"/>
						</flowPart>	

						<flowPart class="optionPart">
							<label left="55" top="5" width="60" height="20" name="angleText" horzTextAlign="center"/>
							<edit left="115" top="5" width="50" height="25" name="angleVal" type="float" min="1" max="360" decimalPlaces="1"/>
							<label left="170" top="5" width="60" height="20" name="angleDegree"/>
						</flowPart>	

					</flowLayout>
				</scrollBox>		
			</tab>

			<tab name="tabImagem">
				<label name="labTitle" left="10" top="0" width="100" height="28" horzTextAlign="leading" vertTextAlign="center" fontSize="15" fontColor="#FFCC66"/>
				<horzLine left="10" top="30" width="290" strokeColor="#FFCC6670" margins="{left=10}"/>			
				
				<script>
					self.labTitle.text = lang("scene.inseridor.tab.imagem");
				</script>

				<layout left="0" top="30" width="300" height="270">
					<rectangle left="45" top="5" width="200" height="200" strokeColor="white" color="black"/>
					<label left="45" top="95" width="200" height="20" fontSize="11" name="click" horzTextAlign="center"/>
					<image left="45" top="5" width="200" height="200" style="autoFit" editable="true" name="image"/>

					<button left="60" top="215" width="175" height="25" name="delete" onClick="self:deleteToken()"/>
					<button left="60" top="245" width="175" height="25" name="input" onClick="self:openFile()"/>
				</layout>

				<layout left="0" top="305" width="300" height="275">
					<scrollBox align="client">
						<label left="0" top="5" width="60" height="20" name="positionText" horzTextAlign="center"/>
						<edit left="60" top="5" width="50" height="25" name="positionX"  type="number"/>
						<edit left="115" top="5" width="50" height="25" name="positionY" type="number"/>
						<button left="170" top="5" width="95" height="25" name="lastClick" onClick="self:setLastClick()"/>
					</scrollBox>
				</layout>
			</tab>

			<template name="ComponenteDeLuz">
				<!-- nomeLabel = uniqueName("labCompLuz");

					if nomeMetric == nil then
						nomeMetric = uniqueName("labMetric");
					end;
					
					if nomeEdit == nil then
						nomeEdit = uniqueName("edtMetric");
					end;				
				-->	 		
				
				<layout align="top" height="28" margins="{top=2}">
					<label name="$(nomeLabel)" align="left" width="100" horzTextAlign="trailing" margins="{right=4}"/>
				
					<edit left="105" top="0" width="50" height="28" name="$(nomeEdit)" type="float" min="0" max="9999" decimalPlaces="1"/>
					<label left="158" top="3" width="50" height="28" name="$(nomeMetric)" text="m" autoSize="true" margins="{left=4, right=2}"/>												
				</layout>
				
				<script>
					self.$(nomeLabel).text = lang('$(title)') .. ":";								
				</script>
			</template>		
			
			<template name="ComponenteDeAngulo">
				<!-- nomeLabel = uniqueName("labCompAngulo"); 
				
					if nomeEdit == nil then
						nomeEdit = uniqueName("edtAngulo");
					end;	
				-->	 			
			
				<layout align="top" height="28" margins="{top=2}">
					<label name="$(nomeLabel)" align="left" width="100" horzTextAlign="trailing" margins="{right=4}"/>	
					
					<edit left="105" top="0" width="30" height="28" name="$(nomeEdit)" type="float" min="1" max="360" decimalPlaces="1"/>
					<label left="138" top="3" width="50" height="28" name="$(nomeMetric)" text="graus" autoSize="true" margins="{left=4, right=2}"/>	
				</layout>
				
				<script>
					self.$(nomeLabel).text = lang('$(title)') .. ":";
				</script>			
			</template>		

			<tab name="tabFOW">
				<scrollBox align="client">
					<flowLayout align="top" autoHeight="true" maxControlsPerLine="1" name="flaContentFOW">			
						<GroupHeader text="scene.fogOfWar.tokenVision"/>		
						
						<flowPart class="optionPart" height="150">	
							<label name="labCampoDeVisao" class="itemTitle"/>				
							<layout class="itemContent">
								<!-- Possui visao -->
								<layout align="top" height="28" margins="{top=2}">
									<label name="labHasVision" align="left" width="100" horzTextAlign="trailing" margins="{right=4}"/>
									<checkBox name="visionHave" align="client" class="itemContent" margins="{top=2}"/>
								</layout>						
								
								<ComponenteDeLuz title="scene.fogOfWar.sobLuzIntensa" nomeMetric="labMetricVLI" nomeEdit="visionIntense"/>
								<ComponenteDeLuz title="scene.fogOfWar.sobLuzFraca" nomeMetric="labMetricVLF" nomeEdit="visionWeak"/>
								<ComponenteDeLuz title="scene.fogOfWar.sobEscuridao" nomeMetric="labMetricVLE" nomeEdit="visionDark"/>
								<ComponenteDeAngulo title="scene.fogOfWar.angulo" nomeEdit="visionAngle"/>
							</layout>			
						</flowPart>					
												
						<GroupHeader text="scene.fogOfWar.tokenLight"/>														

						<flowPart class="optionPart" height="90">	
							<label name="labLuz" class="itemTitle"/>				
							<layout class="itemContent">
								<ComponenteDeLuz title="scene.fogOfWar.luzIntensa" nomeMetric="labMetricLI" nomeEdit="lightIntense"/>
								<ComponenteDeLuz title="scene.fogOfWar.luzFraca" nomeMetric="labMetricLF" nomeEdit="lightWeak"/>
								<ComponenteDeAngulo title="scene.fogOfWar.angulo" nomeEdit="lightAngle"/>
							</layout>			
						</flowPart>					
					</flowLayout>
				</scrollBox>			
			</tab>
		</tabControl>
	</scrollBox>
	
	<layout class="rodapeForm">
		<button width="80" horzTextAlign="center" class="rodapeButton" align="right" onClick="self:processarNew()" name="btnNew"/>
		<button width="80" horzTextAlign="center" class="rodapeButton" align="right" onClick="self:processarSave()" name="btnSave"/>
		<button width="80" horzTextAlign="center" class="rodapeButton" align="right" onClick="self:processarOK()" name="btnInsert"/>
		<button width="100" horzTextAlign="center" class="rodapeButton" align="right" onClick="self:processarOkClose()" name="btnOkName"/>
		<button width="80" horzTextAlign="center" class="rodapeButton" align="right" onClick="self:processarCancel()" name="btnCancelName"/>	

		<script>
			self.btnNew.text = lang('scene.inseridor.buttons.new');
			self.btnSave.text = lang('scene.inseridor.buttons.save');
			self.btnInsert.text = lang('scene.inseridor.buttons.insert');
			self.btnOkName.text = lang('scene.inseridor.buttons.insertClose');
			self.btnCancelName.text = lang('scene.inseridor.buttons.Close');
		</script>
	</layout>
	
	<script><![CDATA[
		local node = ndb.load("inseridorOptions.xml");

		local oldName;

		if node.tokens == nil then
			node.tokens = {};
			node.widthVal = 1;
			node.heightVal = 1;
			node.positionX = 1;
			node.positionY = 1;
		end;

		self.tabImagem.text = lang('scene.inseridor.tab.imagem');
		self.tabPrincipal.text = lang('scene.tokenEdit.propriedades');
		self.tabFOW.text = lang('scene.fogOfWar');

		self.labPersonagem.text = lang('scene.tokenEdit.personagem');
		self.cbxSnapToGrid.text = lang('scene.tokenEdit.snapToGrid');

		self.labCampoDeVisao.text = lang('scene.fogOfWar.alcance.tokenVision');
		self.labLuz.text = lang('scene.fogOfWar.alcance.tokenLight');
		self.labHasVision.text = lang('scene.fogOfWar.token.hasSight');

		self.click.text = lang('scene.inseridor.image.click');
		self.image.url = "";
		self.widthText.text = lang('scene.inseridor.labels.width');
		self.widthCell.text = lang('scene.inseridor.labels.cell');
		self.widthVal.text = node.widthVal;
		self.heightText.text = lang('scene.inseridor.labels.height');
		self.heightCell.text = lang('scene.inseridor.labels.cell');
		self.heightVal.text = node.heightVal;
		self.angleText.text = lang('scene.inseridor.labels.angle');
		self.angleVal.text = node.angleVal;
		self.angleDegree.text = lang('scene.inseridor.labels.degree');
		self.lastClick.text = lang('scene.inseridor.labels.lastClick');
		self.positionText.text = lang('scene.inseridor.labels.position');
		self.positionX.text = node.positionX;
		self.positionY.text = node.positionY;

		self.cbxSnapToGrid.checked = node.snapToGrid;

		self.edtBarValue1.text = node.bar1X;
		self.edtBarMax1.text = node.bar1Y;
		self.cmbCorBar1.color = node.bar1C or "Indianred";

		self.edtBarValue2.text = node.bar2X;
		self.edtBarMax2.text = node.bar2Y;
		self.cmbCorBar2.color = node.bar2C or "Lightskyblue";

		self.edtBarValue3.text = node.bar3X;
		self.edtBarMax3.text = node.bar3Y;
		self.cmbCorBar3.color = node.bar3C or "Limegreen";

		self.cmbPersonagem.value = node.character;

		self.visionIntense.text = node.visionIntense;
		self.visionWeak.text = node.visionWeak;
		self.visionDark.text = node.visionDark;
		self.visionAngle.text = node.visionAngle;
		self.visionHave.checked = node.visionHave;
		self.lightIntense.text = node.lightIntense;
		self.lightWeak.text = node.lightWeak;
		self.lightAngle.text = node.lightAngle;

		self.labelText.text = lang('scene.inseridor.labels.label');
		self.input.text = lang('scene.inseridor.labels.input');
		self.delete.text = lang('scene.inseridor.labels.delete');
		self.layerText.text = lang('scene.inseridor.labels.layer');
		self.layerVal.items = {lang("scene.inseridor.labels.layer1"), lang("scene.inseridor.labels.layer2"), lang("scene.inseridor.labels.layer3")};
		self.layerVal.value = lang("scene.inseridor.labels.layer3");

		function self:prepareForShow(oScene)
			scene = oScene;

			self:listAllCharacters();
		end;

		function self:listAllCharacters()
			local mesa = rrpg.getMesaDe(scene);

			local personagens = {};
			recursiveEnumPersonagensEmBibItem(mesa.biblioteca, personagens);
			
			table.sort(personagens,
				function(left, right)
					return utils.compareStringPtBr(left.nome, right.nome) < 0;
				end);
				
			local nomes = {};
			local valores = {};
			
			nomes[1] = LANG("scene.tokenEdit.semPersonagem");
			valores[1] = "0";
			
			for i = 1, #personagens, 1 do
				nomes[#nomes + 1] = personagens[i].nome;
				valores[#valores + 1] = tostring(personagens[i].codigoInterno);
			end;
			
			self.cmbPersonagem.items = nomes;
			self.cmbPersonagem.values = valores;
		end;

		function recursiveEnumPersonagensEmBibItem(bibItem, dest)
			if bibItem.tipo == "personagem" then
				if (bibItem.loginDono ~= nil) and (bibItem.loginDono ~= "") then
					dest[#dest + 1] = bibItem;
				end;
			else
				local filhos = bibItem.filhos;
				
				for i = 1, #filhos, 1 do
					recursiveEnumPersonagensEmBibItem(filhos[i], dest);
				end;
			end;
		end;

		function self:setLastClick()
			local _lastMouseDown = rawget(scene, "_lastMouseDown");
			local size = scene.grid.cellSize;
							
			if _lastMouseDown ~= nil then
				self.positionX.text, self.positionY.text = scene.grid:worldToCell(_lastMouseDown.x, _lastMouseDown.y);
			else
				self.positionX.text, self.positionY.text = scene.grid:worldToCell((scene.worldWidth / 2), (scene.worldHeight / 2));
			end;
		end;

		function self:openFile()
			dialogs.openFile("Selecione o arquivo de imagem", "image/*", false,
		        function(arquivos)
		                local arq = arquivos[1];
		                -- arq.name possui o nome do arquivo
		                -- arq.stream possui o objeto stream do conteúdo 

		                fireDrive.createDirectory("/uploads");
		                fireDrive.upload("/uploads/" .. arq.name, arq.stream,
		                	function(fditem)
		                		self.image.url = fditem.url;
		                	end);          
		        end);
		end;

		function self:deleteToken()
			dialogs.confirmYesNo(lang('scene.inseridor.labels.deleteConfirm'),
		        function (confirmado)
		            if confirmado then
		                node.tokens[self.labelVal.text] = nil;
		                ndb.deleteNode(self.rclListaDosTokens.selectedNode);
		            else
		                -- usuário escolheu NAO
		            end;
		        end);
		end;

		function self:processarOkClose()
			self:processarOK();
			self:processarCancel();
		end;

		function self:processarSave()
			if oldName~=nil and oldName~="" and oldName~=self.labelVal.text then
		        node.tokens[oldName] = nil;
		        
		        local nodes = ndb.getChildNodes(sheet.tokensSalvos); 
				for i=1, #nodes, 1 do
					if nodes[i].name==oldName then
						ndb.deleteNode(nodes[i]);
					end;
				end

		        oldName = self.labelVal.text;
			end;

			if self.labelVal.text~=nil and self.labelVal.text~="" then
				if node.tokens[self.labelVal.text] == nil then
					local nodo = self.rclListaDosTokens:append();
					nodo.name = self.labelVal.text;
					self.rclListaDosTokens:sort();
				end;
				node.tokens[self.labelVal.text] = {};
				node.tokens[self.labelVal.text].name = self.labelVal.text;
				node.tokens[self.labelVal.text].width = tonumber(self.widthVal.text) or 1;
				node.tokens[self.labelVal.text].height = tonumber(self.heightVal.text) or 1;
				node.tokens[self.labelVal.text].angle = tonumber(self.angleVal.text) or 0;
				node.tokens[self.labelVal.text].x = tonumber(self.positionX.text) or 1;
				node.tokens[self.labelVal.text].y = tonumber(self.positionY.text) or 1;
				node.tokens[self.labelVal.text].snapToGrid = self.cbxSnapToGrid.checked;
				node.tokens[self.labelVal.text].bar1X = self.edtBarValue1.text;
				node.tokens[self.labelVal.text].bar1Y = self.edtBarMax1.text;
				node.tokens[self.labelVal.text].bar1C = self.cmbCorBar1.color;
				node.tokens[self.labelVal.text].bar2X = self.edtBarValue2.text;
				node.tokens[self.labelVal.text].bar2Y = self.edtBarMax2.text;
				node.tokens[self.labelVal.text].bar2C = self.cmbCorBar2.color;
				node.tokens[self.labelVal.text].bar3X = self.edtBarValue3.text;
				node.tokens[self.labelVal.text].bar3Y = self.edtBarMax3.text;
				node.tokens[self.labelVal.text].bar3C = self.cmbCorBar3.color;
				node.tokens[self.labelVal.text].character = self.cmbPersonagem.value;

				node.tokens[self.labelVal.text].visionIntense = self.visionIntense.text;
				node.tokens[self.labelVal.text].visionWeak = self.visionWeak.text;
				node.tokens[self.labelVal.text].visionDark = self.visionDark.text;
				node.tokens[self.labelVal.text].visionAngle = self.visionAngle.text;
				node.tokens[self.labelVal.text].visionHave = self.visionHave.checked ;
				node.tokens[self.labelVal.text].lightIntense = self.lightIntense.text;
				node.tokens[self.labelVal.text].lightWeak = self.lightWeak.text;
				node.tokens[self.labelVal.text].lightAngle = self.lightAngle.text;

				node.tokens[self.labelVal.text].url = self.image.url;

				local num = 3;
				if self.layerVal.value==lang("scene.inseridor.labels.layer2") then
					num = 2;
				elseif self.layerVal.value==lang("scene.inseridor.labels.layer1") then
					num = 1;
				end;
				node.tokens[self.labelVal.text].layer = num;
			else
				local msg = lang("scene.inseridor.msg.noName");
				showMessage(msg);
			end;
		end;

		function self:processarNew()
			self.rclListaDosTokens.selectedNode = nil;

			self.widthVal.text = "1";
			self.heightVal.text = "1";
			self.angleVal.text = "0";
			self.positionX.text = "1";
			self.positionY.text = "1";
			self.cbxSnapToGrid.checked = true;
			self.edtBarValue1.text = "";
			self.edtBarMax1.text = "";
			self.cmbCorBar1.color = "Indianred";
			self.edtBarValue2.text = "";
			self.edtBarMax2.text = "";
			self.cmbCorBar2.color = "Lightskyblue";
			self.edtBarValue3.text = "";
			self.edtBarMax3.text = "";
			self.cmbCorBar3.color = "Limegreen";
			self.cmbPersonagem.value = 0;

			self.visionIntense.text = "102";
			self.visionWeak.text = "1,5";
			self.visionDark.text = "0";
			self.visionAngle.text = "360";
			self.visionHave.checked = false;
			self.lightIntense.text = "0";
			self.lightWeak.text = "0";
			self.lightAngle.text = "360";

			self.image.url = "";
			self.labelVal.text = "";
			oldName = "";
			self.layerVal.value = lang("scene.inseridor.labels.layer3");
		end;

		function self:processarOK()	
			local token;
			if self.layerVal.value==lang("scene.inseridor.labels.layer2") then
				token = scene.items:addToken("objects");
			elseif self.layerVal.value==lang("scene.inseridor.labels.layer1") then
				token = scene.items:addToken("background");
			else
				token = scene.items:addToken("tokens");
			end;		
			local size = scene.grid.cellSize;
			local width = tonumber(self.widthVal.text) or 1;
			local height = tonumber(self.heightVal.text) or 1;
			local angle = tonumber(self.angleVal.text) or 0;
			local x = tonumber(self.positionX.text) or 1;
			local y = tonumber(self.positionY.text) or 1;

			token.snapToGrid = self.cbxSnapToGrid.checked;

			token.barValue1 = self.edtBarValue1.text;
			token.barMax1 = self.edtBarMax1.text;
			token.barColor1 = self.cmbCorBar1.text;
			token.barValue2 = self.edtBarValue2.text;
			token.barMax2 = self.edtBarMax2.text;
			token.barColor2 = self.cmbCorBar2.text;
			token.barValue3 = self.edtBarValue3.text;
			token.barMax3 = self.edtBarMax3.text;
			token.barColor3 = self.cmbCorBar3.text;

			local ownerCharID = tonumber(self.cmbPersonagem.value) or 0;
			if ownerCharID > 0 then
				token.ownerCharacter = ownerCharID;
			else
				token.ownerCharacter = 0;
			end;

			if self.visionIntense.text==nil or self.visionIntense.text=="" then
				self.visionIntense.text = "102";
			end;
			if self.visionWeak.text==nil or self.visionWeak.text=="" then
				self.visionWeak.text = "1,5";
			end;
			if self.visionAngle.text==nil or self.visionAngle.text=="" then
				self.visionAngle.text = "360";
			end;
			if self.lightAngle.text==nil or self.lightAngle.text=="" then
				self.lightAngle.text = "360";
			end;

			token.visionIntenseLightRange = self.visionIntense.text;
			token.visionWeakLightRange = self.visionWeak.text;
			token.visionDarknessRange = self.visionDark.text;
			token.visionAngle= self.visionAngle.text;
			token.visionHaveVision = self.visionHave.checked;
			token.lightIntenseRange = self.lightIntense.text;
			token.lightWeakRange = self.lightWeak.text;
			token.lightAngle = self.lightAngle.text;

			token.x = (x-1) * size;
			token.y = (y-1) * size;

			token.width = token.width * width;
			token.height = token.height * height;
			token.rotation = angle;

			token.image.url = self.image.url;

			if self.labelVal.text~=nil and self.labelVal.text~="" then
				token.name = self.labelVal.text;
				self:processarSave();
			end;

			token.selected = true;
		end;
		
		function self:processarCancel()
			self:close();
		end;
		]]>
	</script>
	
	<event name="onKeyUp">	
		if (event.keyCode == 0x89) or (event.keyCode == 0x1B) then
			setTimeout(
				function()
					self:processarCancel();
				end, 1);
			
			event.keyCode = 0;
			event.key = "";
		end;
	</event>	
	
	<event name="onCancelRequest">
		self:processarCancel();
	</event>
	
</popupForm>